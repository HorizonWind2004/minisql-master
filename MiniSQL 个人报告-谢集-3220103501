<center><h1>MiniSQL 个人报告</h1></center>

<center>谢集，3220103501</center>

## 1. 负责部分

- Lab1 的全部模块实现和测试以及 bonus 「Clock Replacer」 的编写。

- Lab3 的辅助 Debug。

- Lab4 的辅助 Debug。

- Lab5 的全部模块实现和测试。

- Lab6 的全部模块实现和测试。

## 2. 个人报告

### 2.1 Lab1

#### 2.1.1 bitmap_page

`bitmap_page` 是一个简单的位图页面。`AllocatePage` 和 `DeallocatePage` 分别用于分配和释放位图页面。`IsPageFree` 用于判断页面是否空闲。`bitmap_page` 的内部结构类似于简单的 `std::bitset`，他的一个 `char` 可以用来管理 8 个页面。所以具体实现的时候需要用 `/8` 和 `%8` 来定位到具体的位置。 

`bitmap_page` 还提供了两个属性值 `page_allocated_` 和 `next_free_page_`，分别用于有多少个记录被分配和下一个**可能**空闲页面的位置。前者用于快速判断是否有空闲页面，后者用于快速找到空闲页面。我们可以在 `AllocatePage` 和 `DeallocatePage` 中轻松维护这两个属性值。

**测试部分**

由于该部分非常基础，而且后续的测试都有利用 `bitmap_page`，所以我没有额外写测试代码。

![alt text](image.png)

**参考代码**

由于比较基础以及限于篇幅，代码没有给出，具体实现可以参考我们的项目。

#### 2.1.2 disk_manager

`disk_manager` 是一个简单的磁盘管理器。它主要负责管理磁盘上的页面，包括分配和释放页面，读写页面等。其实现主要是基于 `bitmap_page` 的实现。我们可以通过 `bitmap_page` 来管理磁盘上的页面，这样就可以实现页面的分配和释放。`AllocatePage` 会在磁盘上找到一个空闲页面，然后返回该页面的 `page_id`。`DeallocatePage` 会释放一个页面，使得该页面可以被重新分配。`IsPageFree` 用于判断页面是否空闲。`MapPageId` 用于将逻辑页面映射到物理页面。

这个模块设计的难点在于逻辑页号和物理页号，以及对元数据 `meta_data_` 的理解。类似小学数学找规律，我们可以通过一些简单的计算找到逻辑页号和物理页号之间的关系，以此得到 `MapPageId` 函数。而元数据 `meta_data_` 主要用于存储一些关于磁盘文件的信息，比如已经分配的页面数量，已经分配的扩展数量等等。我们使用 `reinterpret_cast` 来将 `meta_data_` 转换为 `DiskFileMetaPage` 类型，这样我们就可以方便的访问元数据。

#include "storage/disk_manager.h"

#include <sys/stat.h>

#include <filesystem>
#include <stdexcept>

#include "glog/logging.h"

DiskManager::DiskManager(const std::string &db_file) : file_name_(db_file) {
  std::scoped_lock<std::recursive_mutex> lock(db_io_latch_);
  db_io_.open(db_file, std::ios::binary | std::ios::in | std::ios::out);
  // directory or file does not exist
  if (!db_io_.is_open()) {
    db_io_.clear();
    // create a new file
    std::filesystem::path p = db_file;
    if (p.has_parent_path()) std::filesystem::create_directories(p.parent_path());
    db_io_.open(db_file, std::ios::binary | std::ios::trunc | std::ios::out);
    db_io_.close();
    // reopen with original mode
    db_io_.open(db_file, std::ios::binary | std::ios::in | std::ios::out);
    if (!db_io_.is_open()) {
      throw std::exception();
    }
  }
  ReadPhysicalPage(META_PAGE_ID, meta_data_);
}

void DiskManager::Close() {
  std::scoped_lock<std::recursive_mutex> lock(db_io_latch_);
  WritePhysicalPage(META_PAGE_ID, meta_data_);
  if (!closed) {
    db_io_.close();
    closed = true;
  }
}

void DiskManager::ReadPage(page_id_t logical_page_id, char *page_data) {
  ASSERT(logical_page_id >= 0, "Invalid page id.");
  ReadPhysicalPage(MapPageId(logical_page_id), page_data);
}

void DiskManager::WritePage(page_id_t logical_page_id, const char *page_data) {
  ASSERT(logical_page_id >= 0, "Invalid page id.");
  WritePhysicalPage(MapPageId(logical_page_id), page_data);
}

/**
 * TODO: Student Implement
 * Done.
 */
page_id_t DiskManager::AllocatePage() {
  DiskFileMetaPage *meta_page = reinterpret_cast<DiskFileMetaPage *>(meta_data_);
  for (uint32_t i = 0; i <= meta_page->GetExtentNums(); i++) {
    int flag = 0;
    if (i == meta_page->GetExtentNums()) {
      meta_page->num_extents_++;
      meta_page->extent_used_page_[i] = 0;
      flag = 1;
      char bitmap_page[PAGE_SIZE];
      memset(bitmap_page, 0, PAGE_SIZE);
      WritePhysicalPage(1 + i * (1 + BITMAP_SIZE), bitmap_page);
    }
    if (meta_page->GetExtentUsedPage(i) < BITMAP_SIZE) {
      uint32_t page_offset;
      int bitmap_page_id = 1 + i * (1 + BITMAP_SIZE);
      char bitmap_page[PAGE_SIZE];
      ReadPhysicalPage(bitmap_page_id, bitmap_page);
      BitmapPage<PAGE_SIZE> *bitmap_page_ = reinterpret_cast<BitmapPage<PAGE_SIZE> *>(bitmap_page);
      if (bitmap_page_->AllocatePage(page_offset)) {
        meta_page->num_allocated_pages_++;
        meta_page->extent_used_page_[i]++;
        WritePhysicalPage(bitmap_page_id, bitmap_page);
        return i * BITMAP_SIZE + page_offset;
      }
    }
    if (flag) 
      break;
  }
  return INVALID_PAGE_ID;
}

/**
 * TODO: Student Implement
 * Done.
 */
void DiskManager::DeAllocatePage(page_id_t logical_page_id) {
  DiskFileMetaPage *meta_page = reinterpret_cast<DiskFileMetaPage *>(meta_data_);
  uint32_t extent_id = logical_page_id / BITMAP_SIZE;
  uint32_t page_offset = logical_page_id % BITMAP_SIZE;
  int bitmap_page_id = 1 + extent_id * (1 + BITMAP_SIZE);
  char bitmap_page[PAGE_SIZE];
  ReadPhysicalPage(bitmap_page_id, bitmap_page);
  if (reinterpret_cast<BitmapPage<PAGE_SIZE> *>(bitmap_page)->DeAllocatePage(page_offset)) {
    meta_page->num_allocated_pages_--;
    meta_page->extent_used_page_[extent_id]--;
    WritePhysicalPage(bitmap_page_id, bitmap_page);
  }
}

/**
 * TODO: Student Implement
 * Done.
 */
bool DiskManager::IsPageFree(page_id_t logical_page_id) {
  int bitmap_page_id = 1 + (logical_page_id / BITMAP_SIZE) * (1 + BITMAP_SIZE);
  char bitmap_page[PAGE_SIZE];
  ReadPhysicalPage(bitmap_page_id, bitmap_page);
  BitmapPage<PAGE_SIZE> *bitmap = reinterpret_cast<BitmapPage<PAGE_SIZE> *>(bitmap_page);
  return bitmap->IsPageFree(logical_page_id % BITMAP_SIZE);
}

/**
 * TODO: Student Implement
 * Done.
 */
page_id_t DiskManager::MapPageId(page_id_t logical_page_id) {
  return 2 + logical_page_id + logical_page_id / BITMAP_SIZE;
}

int DiskManager::GetFileSize(const std::string &file_name) {
  struct stat stat_buf;
  int rc = stat(file_name.c_str(), &stat_buf);
  return rc == 0 ? stat_buf.st_size : -1;
}

void DiskManager::ReadPhysicalPage(page_id_t physical_page_id, char *page_data) {
  int offset = physical_page_id * PAGE_SIZE;
  // check if read beyond file length
  if (offset >= GetFileSize(file_name_)) {
#ifdef ENABLE_BPM_DEBUG
    LOG(INFO) << "Read less than a page" << std::endl;
#endif
    memset(page_data, 0, PAGE_SIZE);
  } else {
    // set read cursor to offset
    db_io_.seekp(offset);
    db_io_.read(page_data, PAGE_SIZE);
    // if file ends before reading PAGE_SIZE
    int read_count = db_io_.gcount();
    if (read_count < PAGE_SIZE) {
#ifdef ENABLE_BPM_DEBUG
      LOG(INFO) << "Read less than a page" << std::endl;
#endif
      memset(page_data + read_count, 0, PAGE_SIZE - read_count);
    }
  }
}

void DiskManager::WritePhysicalPage(page_id_t physical_page_id, const char *page_data) {
  size_t offset = static_cast<size_t>(physical_page_id) * PAGE_SIZE;
  // set write cursor to offset
  db_io_.seekp(offset);
  db_io_.write(page_data, PAGE_SIZE);
  // check for I/O error
  if (db_io_.bad()) {
    LOG(ERROR) << "I/O error while writing";
    return;
  }
  // needs to flush to keep disk file in sync
  db_io_.flush();
}